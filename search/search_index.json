{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to my technical documentation portfolio. This site showcases my writing style, tools knowledge, and management experience, as well as my approach to creating clear, user-focused content using a modern docs-as-code workflow. Each section highlights how documentation integrates into agile product development, DevOps practices, and user experience design.</p> <p>Whether you're interested in DITA content management systems, API reference material, Python-powered automation, or scalable content strategies, this site provides examples of real-world techniques, tooling, and workflows used to deliver high-quality documentation for software products.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li> <p>Team Management: Insights into leading distributed documentation teams in agile environments</p> </li> <li> <p>Content Strategy: A framework for planning, organizing, and delivering scalable content</p> </li> <li> <p>API Documentation: Best practices for writing and maintaining developer-friendly API docs</p> </li> <li> <p>Agile &amp; DevOps: How documentation fits into CI/CD pipelines and sprint-based workflows</p> </li> <li> <p>Python &amp; Automation: Tools and scripts that streamline doc maintenance and publishing</p> </li> <li> <p>Docs-as-Code Projects: Examples of documentation sites built with MkDocs and GitHub</p> </li> <li> <p>UI &amp; Help: Techniques for crafting UI microcopy and embedded product guidance</p> </li> <li> <p>Doc Tools &amp; CMS: Industry-standard tools to create modular, reusable content </p> </li> </ul>"},{"location":"#built-with","title":"Built With","text":"<p>This site is powered by MkDocs and follows a docs-as-code model using:</p> <ul> <li> <p>Markdown for content</p> </li> <li> <p>GitHub for version control and collaboration</p> </li> <li> <p>CI/CD pipelines for automated builds and deployments</p> </li> </ul> <p>Feel free to explore the sections using the navigation menu. If you\u2019re interested in discussing documentation strategy, team leadership, or tooling, I\u2019d be happy to connect.</p>"},{"location":"contact/","title":"Contact","text":"<p>Contact me on LinkedIn to inquire about services or consult on a project. </p> <p></p>"},{"location":"services/","title":"Services","text":"<p>A wide range of consulting services are available to organizations that are scaling rapidly, adopting new technologies, or requiring documentation strategy. These services sit at the intersection of content, engineering, product, and customer experience. Contact for more information on rates and details. </p>"},{"location":"services/#content-strategy-information-architecture","title":"Content Strategy &amp; Information Architecture","text":"<ul> <li> <p>Audit and assess existing documentation</p> </li> <li> <p>Design scalable IA (Information Architecture) aligned to user needs and product features</p> </li> <li> <p>Recommend documentation frameworks (e.g. Di\u00e1taxis, topic-based authoring)</p> </li> </ul>"},{"location":"services/#docs-as-code-transformation","title":"Docs-as-Code Transformation","text":"<ul> <li> <p>Migrate teams from legacy tools (e.g., Word, Author-it, DITA) to Markdown/Git-based pipelines</p> </li> <li> <p>Implement static site generators (MkDocs, Docusaurus, Hugo)</p> </li> <li> <p>Automate build/deploy processes with GitHub Actions or GitLab CI</p> </li> </ul>"},{"location":"services/#dita-content-migration","title":"DITA Content Migration","text":"<ul> <li> <p>Migrate content from legacy tools (e.g., Word, Google Docs, Confluence) to a DITA CMS</p> </li> <li> <p>Re-structure content per DITA standards for reuse and single-sourcing</p> </li> <li> <p>Map styles and perform post-migration cleanup and testing</p> </li> </ul>"},{"location":"services/#content-governance-style-guides","title":"Content Governance &amp; Style Guides","text":"<ul> <li> <p>Create company-wide documentation standards and style guides</p> </li> <li> <p>Develop review workflows with SMEs, engineering, and QA</p> </li> <li> <p>Standardize tone, terminology, and templates across teams</p> </li> </ul>"},{"location":"services/#developer-experience-dx-and-api-docs","title":"Developer Experience (DX) and API Docs","text":"<ul> <li> <p>Audit and rewrite developer docs for clarity and usability</p> </li> <li> <p>Implement tools like OpenAPI/Swagger, Redoc, and Sphinx</p> </li> <li> <p>Improve onboarding flows, tutorials, and SDK references</p> </li> <li> <p>Create configuration and Implementation guides</p> </li> </ul>"},{"location":"services/#knowledge-management-consulting","title":"Knowledge Management Consulting","text":"<ul> <li> <p>Help organizations consolidate siloed content into a central knowledge base</p> </li> <li> <p>Recommend and implement systems like Confluence, Notion, Guru, or internal portals</p> </li> <li> <p>Design taxonomy and tagging systems for content discoverability</p> </li> </ul>"},{"location":"services/#content-production","title":"Content Production","text":"<ul> <li> <p>Write or rewrite user guides, API docs, release notes, and onboarding materials</p> </li> <li> <p>Create structured templates for teams to use (feature docs, how-tos, FAQs)</p> </li> </ul>"},{"location":"services/#documentation-automation-ai-integration","title":"Documentation Automation &amp; AI Integration","text":"<ul> <li> <p>Integrate AI tools to assist with editing, summarizing, or tagging documentation</p> </li> <li> <p>Build scripts to auto-generate docs from code comments or API schemas</p> </li> </ul>"},{"location":"services/#cms-or-tooling-implementation","title":"CMS or Tooling Implementation","text":"<ul> <li> <p>Select and configure tools like MadCap Flare, Paligo, DITA CMS, or custom platforms</p> </li> <li> <p>Train teams on using Git, Markdown, or new publishing pipelines</p> </li> </ul>"},{"location":"services/#team-training-and-mentorship","title":"Team Training and Mentorship","text":"<ul> <li> <p>Train internal teams on writing best practices, docs-as-code, Markdown, Git, etc.</p> </li> <li> <p>Mentor junior technical writers and build internal documentation capabilities</p> </li> </ul>"},{"location":"services/#hiring-and-scaling-documentation-teams","title":"Hiring and Scaling Documentation Teams","text":"<ul> <li> <p>Help startups hire and onboard their first technical writer</p> </li> <li> <p>Define roles, responsibilities, and scalable processes as the org grows</p> </li> </ul>"},{"location":"services/#implementing-documentation-agile-processes","title":"Implementing Documentation Agile Processes","text":"<ul> <li> <p>Train and coach managers and writers on agile methodologies</p> </li> <li> <p>Introduce backlog grooming, sprint planning, standups, and sprint reviews</p> </li> <li> <p>Reinforce the concepts and benefits of velocity, capacity, and burndown charts</p> </li> </ul>"},{"location":"leadership/agile/","title":"Agile and DevOps","text":"<p>This section outlines how our documentation team operates within Agile and DevOps environments to deliver high-quality, timely content in sync with the software development lifecycle.</p>"},{"location":"leadership/agile/#agile-integration","title":"Agile Integration","text":"<p>Our team is fully integrated into the Agile process, working alongside developers, product managers, and QA teams. Writers participate in daily standups, sprint planning, backlog grooming, and retrospectives to ensure documentation is treated as a core deliverable\u2014not an afterthought.</p> <p>Documentation work is tracked as user stories or tasks within the sprint board, giving it visibility and ensuring alignment with product milestones.</p>"},{"location":"leadership/agile/#docs-as-code-workflow","title":"Docs-as-Code Workflow","text":"<p>We follow a docs-as-code model, authoring all content in Markdown and managing it in Git repositories. Writers and SMEs submit changes through pull requests, enabling collaborative editing, version control, and transparent documentation history. </p> <p>Our CI/CD pipelines handle automated builds and deploy documentation updates alongside code, ensuring end users always have access to the latest information.</p>"},{"location":"leadership/agile/#continuous-delivery-and-feedback","title":"Continuous Delivery and Feedback","text":"<p>We release documentation iteratively, using the same cadence as our software development teams. This allows us to respond quickly to changes in functionality, UI, or user feedback. Writers collaborate closely with cross-functional teams to ensure documentation evolves alongside the product.</p> <p>By embedding writing into the Agile and DevOps culture, we ensure that content remains relevant, actionable, and closely tied to user needs.</p>"},{"location":"leadership/management/","title":"Team Management","text":"<p>At the heart of any successful documentation strategy is a high-performing team. Our approach to technical writing leadership emphasizes clarity, collaboration, and continuous improvement\u2014key pillars that align with agile methodologies and modern docs-as-code workflows.</p>"},{"location":"leadership/management/#building-and-leading-the-team","title":"Building and Leading the Team","text":"<p>We believe in assembling diverse, cross-functional teams of writers who bring a mix of product knowledge, technical acumen, and user empathy. Writers are aligned with product squads to ensure tight feedback loops, rapid iteration, and deep subject-matter familiarity.</p> <p>As team lead, I foster an inclusive culture that promotes ownership, transparency, and open communication. Through regular 1:1s, team retrospectives, and skills assessments, I ensure each writer receives the support and coaching needed to grow both personally and professionally.</p>"},{"location":"leadership/management/#agile-alignment","title":"Agile Alignment","text":"<p>Documentation work is fully integrated into the agile development cycle. Writers participate in sprint planning, standups, and retrospectives, ensuring documentation is never an afterthought. We scope doc tasks using user stories, estimate complexity, and track velocity to forecast delivery timelines.</p>"},{"location":"leadership/management/#docs-as-code-workflow","title":"Docs-as-Code Workflow","text":"<p>We manage our content like code\u2014versioned, peer-reviewed, and automated. Writers contribute to Markdown-based source files in GitHub repositories, leveraging pull requests for collaboration and feedback. Our CI pipelines automate formatting checks, link validation, and site deployment, enabling scalable and efficient content delivery.</p>"},{"location":"leadership/management/#style-standards-and-editorial-guidelines","title":"Style Standards and Editorial Guidelines","text":"<p>To ensure consistency and professionalism across all content, we maintain a centralized documentation style guide informed by industry standards (such as Microsoft Style Guide and Google Developer Style Guide) and adapted to our product voice. This guide outlines:</p> <ul> <li> <p>Voice and tone expectations</p> </li> <li> <p>Terminology usage and naming conventions</p> </li> <li> <p>Formatting standards for headings, lists, code blocks, and UI elements</p> </li> <li> <p>Inclusive language practices</p> </li> <li> <p>API and CLI documentation standards</p> </li> </ul> <p>Editorial guidelines are embedded into our review process, ensuring that all writers follow structured authoring patterns and align with UX and product terminology.</p>"},{"location":"leadership/management/#quality-assurance-and-documentation-accuracy","title":"Quality Assurance and Documentation Accuracy","text":"<p>Accuracy is non-negotiable. We\u2019ve implemented a multi-tiered quality assurance process that includes:</p> <ul> <li> <p>Peer Reviews: All content is reviewed via GitHub pull requests by another writer for clarity, completeness, and style compliance.</p> </li> <li> <p>Subject Matter Expert (SME) Reviews: Writers collaborate directly with engineers and product managers to verify technical correctness.</p> </li> <li> <p>Automated Testing: CI pipelines validate Markdown syntax, check for broken links, and flag style violations using tools like Vale and markdownlint.</p> </li> <li> <p>Content Validation: Periodic audits and user feedback loops help identify outdated content, which is prioritized in backlog grooming.</p> </li> </ul> <p>By combining automation with human review, we maintain high standards of accuracy, usability, and trust in our documentation.</p>"},{"location":"leadership/management/#metrics-and-performance","title":"Metrics and Performance","text":"<p>We track team performance using both quantitative and qualitative metrics: doc velocity, backlog burn-down, PR review times, and internal stakeholder satisfaction scores. These KPIs inform continuous process improvements and help us align writing priorities with business impact.</p>"},{"location":"leadership/management/#onboarding-and-knowledge-sharing","title":"Onboarding and Knowledge Sharing","text":"<p>New writers follow a structured onboarding program that introduces our style guides, tooling, workflows, and product domains. Agile processes, tools, and internal wiki encourage knowledge sharing, reducing silos and increasing team agility enabling global teams working across all time zones.</p>"},{"location":"leadership/strategy/","title":"Content Strategy","text":"<p>Our content strategy is built to scale with product complexity and user needs. It ensures that technical documentation is clear, discoverable, and aligned with business goals, while keeping pace with agile development and modern DevOps workflows.</p>"},{"location":"leadership/strategy/#audience-first-approach","title":"Audience-First Approach","text":"<p>We design documentation with a deep understanding of our target audiences, including system administrators, developers, DevOps engineers, and end users. Each content type, from quickstarts and how-to guides to API references and troubleshooting topics, is tailored to the user's journey and level of expertise.</p> <p>We rely on user personas, support feedback, and analytics to prioritize high-impact content that reduces friction and improves adoption.</p>"},{"location":"leadership/strategy/#information-architecture","title":"Information Architecture","text":"<p>Our documentation is structured for easy navigation and scalability. We use topic-based authoring to break down complex systems into modular, reusable chunks. Content is organized around user workflows and product functionality, not internal team structures.</p> <p>We apply consistent taxonomy, metadata, and tagging to improve searchability and ensure users can quickly find the information they need.</p>"},{"location":"leadership/strategy/#content-planning-and-prioritization","title":"Content Planning and Prioritization","text":"<p>Content roadmaps are developed in coordination with product management, UX, support, and engineering. We prioritize documentation deliverables based on product releases, feature complexity, and customer impact.</p> <p>By aligning documentation sprints with product timelines, we ensure content is delivered just-in-time for go-to-market efforts and in-product integrations.</p>"},{"location":"leadership/strategy/#collaboration-and-governance","title":"Collaboration and Governance","text":"<p>Our strategy emphasizes cross-functional collaboration. Writers work closely with engineers, PMs, and designers throughout the development cycle. Documentation tickets are included in Jira (or similar tools), and writing is embedded in agile workflows.</p> <p>We also establish clear governance for content lifecycle management, including tracking versions, deprecations, and ownership to maintain accuracy and consistency over time.</p>"},{"location":"leadership/strategy/#tooling-and-delivery","title":"Tooling and Delivery","text":"<p>We use a docs-as-code toolchain built on GitHub, Markdown, and MkDocs, enabling continuous publishing, automated builds, and integration with CI/CD pipelines. This allows us to scale content delivery efficiently and maintain parity between code and documentation releases.</p>"},{"location":"portfolio/api-documentation/","title":"API Documentation","text":"<p>Clear, accurate API documentation is essential for driving developer adoption, reducing support overhead, and enabling integration at scale. Our approach to API documentation combines technical precision with developer empathy, leveraging modern tooling and best practices throughout the content lifecycle.</p>"},{"location":"portfolio/api-documentation/#developer-centric-design","title":"Developer-Centric Design","text":"<p>API documentation is written with the developer experience in mind. We focus on delivering actionable, example-driven content that helps users understand how to authenticate, make requests, and handle responses with minimal ramp-up time.</p> <p>Each endpoint is documented with request/response syntax, parameter descriptions, HTTP status codes, and real-world examples. Where possible, we include code samples in multiple languages to support a broad developer audience.</p>"},{"location":"portfolio/api-documentation/#source-of-truth","title":"Source of Truth","text":"<p>API documentation is tightly coupled with the source code and specifications to ensure consistency and accuracy. We use OpenAPI (Swagger) definitions as the single source of truth, generating reference documentation and supplementing it with human-authored guides, tutorials, and conceptual overviews.</p> <p>Versioning is managed through Git, and documentation is updated in sync with each release to reflect new endpoints, deprecated functionality, or breaking changes.</p>"},{"location":"portfolio/api-documentation/#documentation-types","title":"Documentation Types","text":"<p>Our API documentation includes a full range of content types to support different stages of the developer journey:</p> <ul> <li> <p>Getting Started Guides: Walkthroughs for authentication, environment setup, and first API calls</p> </li> <li> <p>Endpoint References: Auto-generated or hand-curated descriptions of every endpoint, including methods, headers, and schema</p> </li> <li> <p>Use Case Guides: Step-by-step examples for common workflows and integrations</p> </li> <li> <p>Error Handling: Explanation of error codes, common pitfalls, and troubleshooting steps</p> </li> <li> <p>Changelogs and Release Notes: Timely updates to help developers stay informed about API changes</p> </li> </ul>"},{"location":"portfolio/api-documentation/#tooling-and-workflow","title":"Tooling and Workflow","text":"<p>We follow a docs-as-code approach to maintain API documentation in Markdown or reStructuredText, often integrating with OpenAPI specs via tools like:</p> <ul> <li> <p>Swagger UI or Redoc for rendering</p> </li> <li> <p>MkDocs plugins for schema inclusion</p> </li> <li> <p>CI pipelines to validate specs and deploy changes automatically</p> </li> </ul> <p>Documentation lives alongside code in GitHub, enabling version control, peer review, and continuous delivery.</p>"},{"location":"portfolio/api-documentation/#collaboration-and-accuracy","title":"Collaboration and Accuracy","text":"<p>Writers work closely with backend engineers and product managers to ensure documentation reflects actual functionality. API changes are communicated via pull requests, changelogs, and API design reviews, allowing writers to update documentation in parallel with development.</p>"},{"location":"portfolio/docs-as-code/","title":"Docs-as-Code Projects","text":"<p>Docs-as-Code refers to a documentation model of content creation, file management, and publishing system that uses a plain text editor, a version control tool, and a static site generator. In a docs-as-code model, content is treated like code: versioned, reviewed, tested, and deployed automatically. These projects reflect our commitment to scalable, maintainable, and developer-friendly documentation.</p>"},{"location":"portfolio/docs-as-code/#philosophy-and-approach","title":"Philosophy and Approach","text":"<p>Docs-as-code is more than just a toolset; it is a mindset. By applying software development best practices to documentation, we ensure:</p> <ul> <li> <p>Transparency through Git-based version control</p> </li> <li> <p>Collaboration through pull requests and structured reviews</p> </li> <li> <p>Consistency using automated linting and formatting checks</p> </li> <li> <p>Agility with CI/CD pipelines that support rapid publishing</p> </li> <li> <p>Reusability by building modular, topic-based content</p> </li> </ul> <p>This model enables technical writers to work alongside developers in the same environment, which improves efficiency and alignment.</p>"},{"location":"portfolio/docs-as-code/#featured-projects","title":"Featured Projects","text":""},{"location":"portfolio/docs-as-code/#developer-portal","title":"Developer Portal","text":"<p>A comprehensive developer hub for internal and external APIs, built with MkDocs and hosted on GitHub Pages. Key features include:</p> <ul> <li> <p>OpenAPI-based endpoint references</p> </li> <li> <p>Code samples in multiple languages</p> </li> <li> <p>Automated deployments using GitHub Actions</p> </li> <li> <p>Versioned documentation aligned with each API release</p> </li> </ul>"},{"location":"portfolio/docs-as-code/#product-onboarding-guide","title":"Product Onboarding Guide","text":"<p>An interactive onboarding experience for enterprise customers, built with Docusaurus. The project includes:</p> <ul> <li> <p>Step-by-step walkthroughs for new users</p> </li> <li> <p>Interactive code snippets and example use cases</p> </li> <li> <p>Embedded videos and in-product links</p> </li> </ul>"},{"location":"portfolio/docs-as-code/#internal-knowledge-base","title":"Internal Knowledge Base","text":"<p>A living documentation site for engineering, DevOps, and support teams, created with MkDocs Material. Features include:</p> <ul> <li> <p>Role-based navigation for different teams</p> </li> <li> <p>Tagging and search filters for quick discovery</p> </li> <li> <p>Automated checks for link validity and formatting</p> </li> <li> <p>Feedback mechanisms integrated with GitHub Discussions</p> </li> </ul>"},{"location":"portfolio/docs-as-code/#tooling-stack","title":"Tooling Stack","text":"<p>Most projects are powered by a modern documentation toolchain, which includes:</p> <ul> <li> <p>Markdown and YAML for content and configuration</p> </li> <li> <p>GitHub or GitLab for version control and team collaboration</p> </li> <li> <p>MkDocs or Docusaurus for static site generation</p> </li> <li> <p>CI/CD tools such as GitHub Actions or Jenkins for deployment</p> </li> <li> <p>Vale and markdownlint to enforce style and formatting</p> </li> <li> <p>OpenAPI or Swagger for structured API documentation</p> </li> </ul>"},{"location":"portfolio/docs-as-code/#collaboration-and-workflow","title":"Collaboration and Workflow","text":"<p>Documentation lives in the same repositories as the product code. Writers participate in early feature discussions and continue through the release process. Every change is tracked through pull requests and reviewed by peers or subject matter experts. CI pipelines automatically build and deploy updates, ensuring fast and reliable content delivery.</p>"},{"location":"portfolio/doctoolscms/","title":"Doc Tools & CMS","text":"<p>Creating modular, reusable, and consistent documentation at scale requires the right mix of content strategy and tooling. This approach emphasizes structured authoring, single-sourcing, and automation to streamline content creation across teams and products.</p>"},{"location":"portfolio/doctoolscms/#modular-content-design","title":"Modular Content Design","text":"<p>Documentation is authored using modular topics and components, enabling reuse across multiple deliverables. Structured authoring frameworks such as DITA XML and templates in MadCap Flare or SDL Tridion Docs support the creation of small, focused content units that can be assembled into user guides, knowledge base articles, or embedded help.</p> <p>Each module is tagged with metadata for versioning, audience segmentation, and delivery context. This makes it easy to maintain content variants across multiple platforms or products.</p>"},{"location":"portfolio/doctoolscms/#single-sourcing-strategy","title":"Single-Sourcing Strategy","text":"<p>Content is written once and reused wherever applicable. Variables, conditions, and snippets allow for dynamic publishing that adapts to product versions, user roles, and delivery channels. This approach reduces duplication, simplifies updates, and ensures consistency across all documentation assets.</p> <p>Multi-channel publishing workflows deliver content to web, PDF, mobile, and in-product help systems from a single source.</p>"},{"location":"portfolio/doctoolscms/#authoring-and-editing-tools","title":"Authoring and Editing Tools","text":"<p>A combination of visual and structured editors supports different authoring needs and experience levels:</p> <ul> <li> <p>MadCap Flare and SDL Tridion Docs for template-driven authoring and output management</p> </li> <li> <p>DITA-compliant editors such as Oxygen XML and XMetaL for structured, standards-based authoring</p> </li> <li> <p>Markdown-based editors for lightweight, developer-friendly documentation projects</p> </li> </ul> <p>All tools support version control and shared content libraries.</p>"},{"location":"portfolio/doctoolscms/#ai-and-automation","title":"AI and Automation","text":"<p>Automation enhances both efficiency and scalability in the documentation process. AI-driven tools are used to:</p> <ul> <li> <p>Pre-tag and classify content for metadata and reuse</p> </li> <li> <p>Auto-summarize large documents into knowledge base articles</p> </li> <li> <p>Suggest or generate content variants based on usage data</p> </li> <li> <p>Validate structure, grammar, and style using intelligent linters</p> </li> </ul> <p>For DITA-based environments, automation scripts support batch transformation, validation, and publishing based on map configurations or release branches.</p>"},{"location":"portfolio/doctoolscms/#workflow-integration","title":"Workflow Integration","text":"<p>Documentation tools are fully integrated with product development and release workflows. Source files are stored in Git repositories to enable collaboration, review, and continuous publishing.</p> <ul> <li> <p>CMS platforms connect to build and release pipelines</p> </li> <li> <p>Content reviews are aligned with sprint demos and release milestones</p> </li> <li> <p>Output builds are automated using scripts or CI/CD tools such as Jenkins or GitHub Actions</p> </li> </ul> <p>This workflow ensures that documentation is updated in parallel with product development.</p>"},{"location":"portfolio/help-systems/","title":"UI Help & Guides","text":"<p>Effective in-product content enhances usability, reduces support requests, and helps users succeed without leaving the application. Content such as user interface text, in-app help, and embedded guidance supports users at the moment they need it.</p>"},{"location":"portfolio/help-systems/#ui-text-and-microcopy","title":"UI Text and Microcopy","text":"<p>Clear and concise UI text is essential to good user experience. We collaborate with product designers and UX teams to craft microcopy that is action-oriented, accessible, and user-focused. This includes:</p> <ul> <li> <p>Button labels, field names, and tooltips</p> </li> <li> <p>Error and confirmation messages</p> </li> <li> <p>Onboarding screens and instructional text</p> </li> <li> <p>Empty state messaging and alerts</p> </li> </ul> <p>We follow UX writing best practices to ensure consistency in tone and clarity across the product. Terminology is aligned with broader documentation to create a seamless experience for users moving between the UI and support content.</p>"},{"location":"portfolio/help-systems/#in-product-help","title":"In-Product Help","text":"<p>In-app help provides users with quick answers without switching contexts. We design and write:</p> <ul> <li> <p>Contextual tooltips and inline hints</p> </li> <li> <p>Help panels and collapsible instructions</p> </li> <li> <p>Embedded walkthroughs and quick-start cards</p> </li> <li> <p>Links to related docs and external resources</p> </li> </ul> <p>This content is created in close coordination with the product development cycle. Writers are involved in early design discussions and help plan how and where guidance is surfaced in the UI.</p>"},{"location":"portfolio/help-systems/#collaboration-and-workflow","title":"Collaboration and Workflow","text":"<p>Writers work closely with UX designers, engineers, and product managers to integrate content directly into the user interface. We contribute copy via design tools like Figma and track tasks through the same ticketing systems used by the broader product team.</p> <p>Text is validated through usability testing and feedback loops with customers and support teams. We iterate based on real usage data to ensure the content meets user needs in real-world scenarios.</p>"},{"location":"portfolio/python/","title":"Python & Automation","text":"<p>Python plays a key role in automating documentation workflows, transforming how we manage, generate, and maintain technical content at scale. We use Python to streamline processes, improve content accuracy, and support dynamic documentation experiences.</p>"},{"location":"portfolio/python/#scripting-for-docs-as-code","title":"Scripting for Docs-as-Code","text":"<p>We leverage Python scripts to automate repetitive tasks across the docs-as-code toolchain. Common use cases include:</p> <ul> <li> <p>Bulk updating front matter in Markdown files</p> </li> <li> <p>Linting content for style and formatting consistency</p> </li> <li> <p>Converting source files between formats (Markdown, reStructuredText, JSON, YAML)</p> </li> <li> <p>Generating documentation from code comments or API specs</p> </li> </ul> <p>Automation scripts integrate seamlessly with Git-based workflows, allowing for fast iteration and reliable results.</p>"},{"location":"portfolio/python/#api-documentation-automation","title":"API Documentation Automation","text":"<p>Python is also used to parse OpenAPI (Swagger) files and automatically generate endpoint reference documentation. These scripts can extract schemas, flatten nested parameters, and output clean, readable Markdown for inclusion in static sites or developer portals.</p> <p>We also use Python to validate documentation against live APIs, ensuring that examples remain current and endpoints return the expected results.</p>"},{"location":"portfolio/python/#continuous-integration-and-testing","title":"Continuous Integration and Testing","text":"<p>Our CI/CD pipelines include Python-based tools that automate testing, building, and deploying documentation. Examples include:</p> <ul> <li> <p>Link checking and spell-checking</p> </li> <li> <p>Code sample validation</p> </li> <li> <p>Screenshot automation </p> </li> <li> <p>Regression testing for versioned documentation</p> </li> </ul> <p>These automations reduce manual review time and ensure consistent quality across releases.</p>"},{"location":"portfolio/python/#internal-tools-and-custom-workflows","title":"Internal Tools and Custom Workflows","text":"<p>We've developed internal Python tools to perform the following documentation functions:</p> <ul> <li> <p>Query GitHub issues or pull requests for doc-related changes</p> </li> <li> <p>Monitor content coverage across product areas</p> </li> <li> <p>Trigger documentation builds when certain labels or tags are applied</p> </li> </ul> <p>By investing in automation, we free up time for writers to focus on higher-value work such as user experience, information architecture, and content strategy.</p>"}]}